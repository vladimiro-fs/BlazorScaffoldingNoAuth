@page "/products/details"
@using Microsoft.EntityFrameworkCore
@using BlazorScaffoldingNoAuth.Models
@inject IDbContextFactory<BlazorScaffoldingNoAuth.Data.BlazorScaffoldingNoAuthContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Product</h2>
    <hr />
    @if (product is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@product.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@product.Description</dd>
            <dt class="col-sm-2">Image</dt>
            @* <dd class="col-sm-10">@product.ImageUrl</dd> *@

            <dd class="col-sm-10">
                @if (!string.IsNullOrEmpty(product.ImageUrl))
                {
                    string imagePath = $"images/{product.ImageUrl}";
                    string defaultImagePath = $"images/noimage.jpg";

                    if (File.Exists($"wwwroot/{imagePath}"))
                    {
                        <img src="@($"/{imagePath}")" alt="@product.Name" style="max-width: 300px;" />
                    }
                    else
                    {
                        <img src="@($"/{defaultImagePath}")" alt="No image" style="max-width: 300px;" />
                    }
                }
                else
                {
                    <img src="/images/noimage.jpg" alt="No image" style="max-width: 300px;" />    
                }
            </dd> 
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@product.Price</dd>
            <dt class="col-sm-2">CategoryId</dt>
            <dd class="col-sm-10">@product.CategoryId</dd>
        </dl>
        <div>
            <a href="@($"/products/edit?id={product.Id}")">Edit</a> |
            <a href="@($"/products")">Back to List</a>
        </div>
    }
</div>

@code {
    private Product? product;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.Id == Id);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
